@use './variables';
@use './breakpoints';
@use './colors';

@mixin fit-image{
    width: 100%;
    height: 100%;
    max-height: 300px;
    object-fit: cover;
  }


@mixin form-format{
  width: 80%;
  max-width: 400px;
  margin: 0 auto;

  & .input-control{
    margin-bottom: 1rem;

    & label, .image-label{
      display: block;
      margin-bottom: 0.25rem;
      font-weight: bold;
      font-size: 18px;
    }

    & input{
      width: 100%;
    }

    & input[type=number]{
      width: auto;
    }

    & select{
      @include format-select;
    }

    & textarea {
      resize: none;
      width: 100%;
      font-family: variables.$ff-primary;
      font-size: 16px;
      padding: 1rem;
    }
  }

  & button{
    margin-top: 3rem;
  }

  .checkbox-control{
    display: flex;
    justify-content: flex-start;
    align-items: flex-start;

    & input{
        max-width: 50px;
        align-self: center;
    }
  }
}


@mixin format-select{
  padding: 0.75rem 1rem;
  font-family: variables.$ff-primary;
  font-size: 16px;
}

@mixin overlay{
    position:fixed;
    display:none;
    background-color: colors.$color-dark-transparent;
    top:0;
    left:0;
    bottom:0;
    width: 100%;
    z-index: 1;

    &.show{
      display:block;
    }
}

// Breakpoint manager
// @ param {String} $breakpoint - Breakpoint
// @ requires $breakpoints
// @ access Public

@mixin respond-to($breakpoint) {
  $raw-query: map-get(breakpoints.$breakpoints, $breakpoint);

  @if $raw-query {
    $query: if(
      type-of($raw-query) =='string',
      unquote($raw-query),
      inspect($raw-query)
    );

    @media #{$query} {
      @content;
    }

  } @else {
    @error 'No value found for `#{$breakpoint}`. Please make sure it is defined in `$breakpoints` map.';
  }
}
